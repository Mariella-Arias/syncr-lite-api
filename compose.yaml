services:
  server:
    build:
      context: .
    ports:
      - 8000:8000

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    environment:
      - SECRET_KEY_FILE=/run/secrets/secret-key
      - DB_NAME=syncr_lite
      - DB_USER=postgres
      - DB_PASSWORD_FILE=/run/secrets/db-password
      - DB_HOST=db
      - DB_PORT=5432
      - EMAIL_PORT=587
      - EMAIL_HOST_USER=syncr.auth@gmail.com
      - EMAIL_HOST_PASSWORD_FILE=/run/secrets/email-password
      - ENVIRONMENT=production
      - DEBUG=False
      - FRONTEND_DOMAIN=mariella-arias.github.io/syncr-lite-ui
      - ALLOWED_HOSTS=syncr-lite-api.onrender.com
      - CORS_ALLOWED_ORIGINS=https://mariella-arias.github.io

    depends_on:
      db:
        condition: service_healthy
        restart: true
    secrets:
      - secret-key
      - db-password
      - email-password
    develop:
      watch:
        - action: rebuild
          path: .

  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=syncr_lite
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  secret-key:
    file: server/secretkey.txt
  db-password:
    file: db/password.txt
  email-password:
    file: email/password.txt
